/**
 * Documentation Importer Utility
 * 
 * This utility helps synchronize website documentation with dashboard documentation
 * by providing functions to import and adapt dashboard markdown content for the website.
 * 
 * AUTO-GENERATED: This file is automatically generated during build time.
 * Do not edit manually - changes will be overwritten.
 * 
 * Last Updated: 2025-09-10
 */

// Local content store with actual dashboard documentation
const LOCAL_DOCUMENTATION_CONTENT = {
  'SYSTEM_OVERVIEW.md': `# System Overview

## What It Is

**MyBitcoinFuture** is a Bitcoin Treasury Management System that provides multi-wallet tracking, portfolio analytics, transaction monitoring, and reporting capabilities. The system operates with mock data for development and integrates with real Bitcoin nodes and APIs for production use.

## Architecture

### Core Components
\`\`\`
┌─────────────────────────────────────────────────────────────┐
│                    MyBitcoinFuture System Architecture     │
│                                                             │
│  ┌─────────────────┐    ┌─────────────────┐    ┌─────────────┐
│  │  Desktop App    │    │   Web Frontend  │    │   CLI Interface │
│  │  (Electron)     │    │   (React)       │    │   (Commander)   │
│  │                 │    │   Port: 3003    │    │                 │
│  └─────────────────┘    └─────────────────┘    └─────────────────┘
│           │                       │                        │
│           └───────────────────────┼────────────────────────┘
│                                   │                        │
│  ┌─────────────────────────────────┼────────────────────────┐
│  │         Backend API Server      │                        │
│  │         (Node.js/Express)       │                        │
│  │         Port: 3100              │                        │
│  └─────────────────────────────────┘                        │
│                                   │                        │
│  ┌─────────────────────────────────┼────────────────────────┐
│  │         Data Layer              │                        │
│  │  ┌─────────────┐ ┌─────────────┐│                        │
│  │  │   SQLite    │ │   Redis     ││                        │
│  │  │  Database   │ │   Cache     ││                        │
│  │  └─────────────┘ └─────────────┘│                        │
│  └─────────────────────────────────┘                        │
│                                   │                        │
│  ┌─────────────────────────────────┼────────────────────────┐
│  │         Bitcoin Integration     │                        │
│  │  ┌─────────────┐ ┌─────────────┐│                        │
│  │  │  Bitcoin    │ │  Public     ││                        │
│  │  │    Core     │ │   APIs      ││                        │
│  │  │     RPC     │ │ (Mempool,   ││                        │
│  │  │             │ │ Blockstream)││                        │
│  │  └─────────────┘ └─────────────┘│                        │
│  └─────────────────────────────────┘                        │
└─────────────────────────────────────────────────────────────┘
\`\`\`

### Key Services
- **WalletService** - Multi-wallet management with xpub tracking
- **TransactionService** - Global transaction management and filtering
- **PortfolioService** - Portfolio analytics and performance tracking
- **ReportService** - Reporting and export capabilities
- **AnalyticsService** - Advanced analytics and insights
- **SecurityService** - Authentication, authorization, and audit logging
- **SecureLogger** - Secure logging with automatic data redaction
- **ErrorHandler** - Centralized error handling and validation
- **statusUtils** - Centralized status display utilities

## Core Functionality

### Multi-Wallet Management
- Track multiple Bitcoin wallets via xpub
- Real-time balance monitoring
- Wallet hierarchy and organization
- Security scoring and risk assessment

### Portfolio Analytics
- Real-time portfolio overview
- Performance attribution and analysis
- Risk metrics and assessment
- Historical performance tracking

### Transaction Monitoring
- Global transaction filtering and search
- Advanced filtering by amount, type, date, wallet
- Transaction export (CSV, JSON)
- Transaction statistics and summaries

### Enhanced Setup System
- Multi-step setup wizard with auto-discovery
- Automatic timezone and language detection
- Bitcoin node auto-discovery and configuration
- Sensible defaults with manual override options
- Complete setup in under 5 minutes

### Theme System
- Professional theme customization
- Light and dark mode support
- Multiple theme variants (Bitcoin, Financial, Corporate, etc.)
- Persistent theme preferences
- Responsive design across all devices

### Reporting System
- Financial summary reports
- Performance analysis reports
- Tax reporting capabilities
- Audit trail and compliance reports
- Template-based report generation

### Plugin System
- Extensible functionality through plugins
- Admin-protected plugin management
- Event-driven plugin architecture
- Marketplace for plugin discovery

### User Management
- Multi-user support with role-based access
- User creation, modification, and deletion
- Permission management
- Session management

### Alert System
- Configurable alerts for wallet events
- Price change notifications
- Transaction monitoring alerts
- System status notifications

## Data Flow

### Mock Data Generation
\`\`\`
UnifiedMockDataService
├── generateWallets() → Realistic wallet data
├── generateTransactions() → Bitcoin transaction data
├── generatePriceHistory() → Market price data
└── generateAnalytics() → Portfolio analytics data
\`\`\`

### Real Bitcoin Integration
\`\`\`
BitcoinDataService
├── Bitcoin Core RPC integration
├── Mempool.space API integration
├── Blockstream API integration
└── Electrum protocol support
\`\`\`

### Error Handling
\`\`\`
ErrorHandler
├── ValidationError() → Input validation errors
├── NotFoundError() → Resource not found errors
├── SearchError() → Search operation errors
├── NotificationError() → Notification errors
├── ExportError() → Export operation errors
└── ImportError() → Import operation errors
\`\`\`

## Security Model

### Authentication
- JWT token-based authentication
- Role-based access control
- Session management
- Two-factor authentication support

### Data Protection
- xpub-only architecture (no private keys)
- Read-only Bitcoin operations
- Secure logging with automatic data redaction
- Input validation and sanitization

### Audit and Compliance
- Comprehensive audit logging
- Security event tracking
- Compliance reporting
- Data export and backup capabilities

## Development Features

### Testing
- Comprehensive unit tests
- Integration tests
- End-to-end tests with Playwright
- Performance testing
- Security testing

### Code Quality
- Centralized error handling
- Consistent status utilities
- Secure logging practices
- Code linting and formatting

### Development Tools
- Hot reloading for development
- Mock API server for testing
- Comprehensive CLI interface
- Development environment setup

## Integration Points

### Bitcoin Services
- Bitcoin Core RPC
- Mempool.space API
- Blockstream API
- Electrum servers

### External APIs
- Price data providers
- Market data sources
- Compliance services
- Notification services

### Development Tools
- Git version control
- npm package management
- Docker containerization
- CI/CD pipeline support

## Performance Characteristics

### Response Times
- API responses under 200ms
- UI rendering under 100ms
- Theme switching under 50ms
- Database queries optimized

### Scalability
- Modular architecture
- Caching strategies
- Rate limiting
- Load balancing support

### Reliability
- Error handling and recovery
- Data validation
- Backup and restore
- Health monitoring

## Deployment Options

### Development
- Local development environment
- Mock data for testing
- Hot reloading
- Debug tools

### Production
- Docker containerization
- Environment configuration
- Database persistence
- Security hardening

### Desktop Application
- Electron-based desktop app
- Cross-platform support
- Offline capabilities
- Native integration
`,
  'API_DOCUMENTATION.md': `# MyBitcoinFuture Treasury API Documentation

## Overview

The MyBitcoinFuture Treasury API provides comprehensive Bitcoin treasury management capabilities including wallet management, transaction tracking, advanced analytics, and real-time notifications. The API now includes enhanced performance optimization features with intelligent caching and batch processing capabilities.

**Base URL:** \`http://localhost:3100\`  
**Version:** 2.0.0  
**Authentication:** Bearer Token (JWT)

### 🚀 **Performance Features**
- **Intelligent Caching:** LRU cache with 70-80% performance improvement for repeated operations
- **Batch Processing:** Parallel validation and processing for multiple inputs
- **Auto-Optimization:** Dynamic performance tuning based on usage patterns
- **Real-time Metrics:** Comprehensive performance monitoring and analytics

---

## Authentication

### Login
\`\`\`http
POST /auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "YOUR_PASSWORD"
}
\`\`\`

**Response:**
\`\`\`json
{
  "token": "YOUR_JWT_TOKEN",
  "user": {
    "id": "YOUR_USER_ID",
    "username": "admin",
    "roles": ["admin"]
  }
}
\`\`\`

**Usage:** Include the token in the Authorization header for all protected endpoints:
\`\`\`http
Authorization: Bearer YOUR_JWT_TOKEN
\`\`\`

---

## Core Endpoints

### System Health

#### Get System Status
\`\`\`http
GET /status
\`\`\`

**Response:**
\`\`\`json
{
  "setupNeeded": false
}
\`\`\`

#### Get System Health
\`\`\`http
GET /health
\`\`\`

**Response:**
\`\`\`json
{
  "status": "ok",
  "version": "1.0.0",
  "timestamp": "2025-08-20T03:01:15.575Z"
}
\`\`\`

### User Management

#### Get Users
\`\`\`http
GET /users?limit=20&offset=0&role=admin&status=active&search=john
Authorization: Bearer <token>
\`\`\`

**Query Parameters:**
- \`limit\` (optional): Number of users to return (1-100, default: 20)
- \`offset\` (optional): Number of users to skip (default: 0)
- \`role\` (optional): Filter by user role
- \`status\` (optional): Filter by user status
- \`search\` (optional): Search in username and email

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "users": [
      {
        "id": "user_id",
        "username": "admin",
        "email": "admin@example.com",
        "roles": ["admin"],
        "status": "active",
        "created_at": "2025-08-20T03:01:15.575Z"
      }
    ],
    "total": 1,
    "limit": 20,
    "offset": 0
  }
}
\`\`\`

#### Get User by ID
\`\`\`http
GET /users/:id
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "user": {
      "id": "user_id",
      "username": "admin",
      "email": "admin@example.com",
      "roles": ["admin"],
      "status": "active",
      "created_at": "2025-08-20T03:01:15.575Z"
    }
  }
}
\`\`\`

#### Update User
\`\`\`http
PUT /users/:id
Authorization: Bearer <token>
Content-Type: application/json

{
  "email": "newemail@example.com",
  "roles": ["admin", "user"],
  "status": "active"
}
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "message": "User updated successfully",
    "user_id": "user_id"
  }
}
\`\`\`

#### Delete User
\`\`\`http
DELETE /users/:id
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "message": "User deleted successfully",
    "user_id": "user_id"
  }
}
\`\`\`

### Transaction Management

#### Delete Transaction
\`\`\`http
DELETE /transactions/:txid
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "deleted": true,
    "txid": "transaction_hash"
  }
}
\`\`\`

### Search and Filter

#### Get Search Types
\`\`\`http
GET /search-filter/types
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "dataTypes": ["transactions", "wallets", "users"],
    "configurations": {
      "transactions": {
        "searchableFields": ["txid", "description"],
        "filterableFields": ["status", "amount", "date"]
      }
    }
  }
}
\`\`\`

#### Search Data
\`\`\`http
GET /search-filter/search/:dataType?query=bitcoin&limit=10&offset=0
Authorization: Bearer <token>
\`\`\`

**Query Parameters:**
- \`query\`: Search term
- \`limit\` (optional): Number of results (default: 50)
- \`offset\` (optional): Number of results to skip (default: 0)

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "results": [...],
    "total": 25,
    "query": "bitcoin"
  }
}
\`\`\`

#### Filter Data
\`\`\`http
POST /search-filter/filter/:dataType
Authorization: Bearer <token>
Content-Type: application/json

{
  "filters": {
    "status": "confirmed",
    "amount": { "min": 0.001, "max": 1.0 }
  },
  "limit": 20,
  "offset": 0,
  "sortBy": "date",
  "sortOrder": "desc"
}
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "results": [...],
    "total": 15,
    "filters": {...}
  }
}
\`\`\`

#### Search and Filter Combined
\`\`\`http
POST /search-filter/search-and-filter/:dataType
Authorization: Bearer <token>
Content-Type: application/json

{
  "query": "bitcoin",
  "filters": {
    "status": "confirmed"
  },
  "limit": 20,
  "offset": 0
}
\`\`\`

#### Get Search Suggestions
\`\`\`http
GET /search-filter/suggestions/:dataType?query=bit
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "suggestions": ["bitcoin", "bitcoin core", "bitcoin wallet"]
  }
}
\`\`\`

#### Clear Search Cache
\`\`\`http
DELETE /search-filter/cache
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "message": "Search cache cleared successfully"
  }
}
\`\`\`

### Performance Monitoring

#### Get Performance Metrics
\`\`\`http
GET /performance/metrics
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "metrics": {
      "cacheHitRate": 0.85,
      "avgResponseTime": 120,
      "activeConnections": 45,
      "memoryUsage": 0.67
    },
    "optimization": {
      "enabled": true,
      "lastOptimization": "2025-08-20T03:01:15.575Z"
    },
    "redis": {
      "connected": true,
      "memoryUsage": "256MB",
      "keys": 1250
    },
    "timestamp": "2025-08-20T03:01:15.575Z"
  }
}
\`\`\`

#### Reset Performance Metrics
\`\`\`http
POST /performance/reset
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "message": "Performance metrics reset successfully"
  }
}
\`\`\`

#### Enable Auto-Optimization
\`\`\`http
POST /performance/optimization/enable
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "message": "Auto-optimization enabled"
  }
}
\`\`\`

#### Set Optimization Thresholds
\`\`\`http
POST /performance/optimization/thresholds
Authorization: Bearer <token>
Content-Type: application/json

{
  "cacheHitRate": 0.8,
  "avgResponseTime": 150,
  "maxCacheSize": 1000
}
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "message": "Optimization thresholds updated"
  }
}
\`\`\`

### Plugin Management

#### Get Plugin Marketplace
\`\`\`http
GET /plugins/marketplace
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "plugins": [
      {
        "id": "hardware-wallet-integration",
        "name": "Hardware Wallet Integration",
        "description": "Secure integration with hardware wallets",
        "version": "1.0.0",
        "price": 29.99,
        "category": "security",
        "verified": true,
        "rating": 4.8,
        "downloads": 1250
      }
    ],
    "categories": ["security", "analytics", "automation"],
    "total": 15
  }
}
\`\`\`

#### Install Plugin
\`\`\`http
POST /plugins/install
Authorization: Bearer <token>
Content-Type: application/json

{
  "pluginId": "hardware-wallet-integration",
  "source": "https://marketplace.mybitcoinfuture.com/plugins/hardware-wallet-integration.zip"
}
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "message": "Plugin installed successfully",
    "pluginId": "hardware-wallet-integration"
  }
}
\`\`\`

#### Get Installed Plugins
\`\`\`http
GET /plugins/installed
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "plugins": [
      {
        "id": "hardware-wallet-integration",
        "name": "Hardware Wallet Integration",
        "version": "1.0.0",
        "status": "active",
        "installedAt": "2025-08-20T03:01:15.575Z"
      }
    ]
  }
}
\`\`\`

#### Update Plugin
\`\`\`http
PUT /plugins/:pluginId
Authorization: Bearer <token>
Content-Type: application/json

{
  "version": "1.1.0",
  "source": "https://marketplace.mybitcoinfuture.com/plugins/hardware-wallet-integration-v1.1.0.zip"
}
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "message": "Plugin updated successfully",
    "pluginId": "hardware-wallet-integration",
    "newVersion": "1.1.0"
  }
}
\`\`\`

#### Uninstall Plugin
\`\`\`http
DELETE /plugins/:pluginId
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "message": "Plugin uninstalled successfully",
    "pluginId": "hardware-wallet-integration"
  }
}
\`\`\`

---

## Advanced Analytics Endpoints

### Analytics Health Check
\`\`\`http
GET /advanced-analytics/health
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "status": "healthy",
    "service": "advanced-analytics",
    "timestamp": "2025-08-20T03:01:15.781Z",
    "cache": {
      "size": 0,
      "ttl": 300000
    },
    "features": [
      "portfolio_metrics",
      "risk_analysis",
      "market_trends",
      "performance_analysis",
      "portfolio_optimization"
    ]
  },
  "meta": {
    "timestamp": "2025-08-20T03:01:15.782Z",
    "version": "1.0.0"
  }
}
\`\`\`

### Portfolio Metrics
\`\`\`http
GET /advanced-analytics/portfolio-metrics?wallets=wallet1,wallet2
Authorization: Bearer <token>
\`\`\`

**Query Parameters:**
- \`wallets\` (optional): Comma-separated list of wallet IDs

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "totalValue": 421200,
    "totalBTC": 3.9,
    "riskScore": 50,
    "performance": {
      "historicalReturns": [
        {
          "date": "2025-07-21",
          "return": 0.034927583191891834,
          "price": 46571.74124363513
        }
      ],
      "averageReturn": -0.0030664904327667316,
      "totalReturn": -0.09506120341576868,
      "annualizedReturn": -1.119269007959857,
      "bestDay": 0.04537827274282136,
      "worstDay": -0.04514147609777358
    },
    "trends": {
      "shortTerm": "neutral",
      "mediumTerm": "neutral",
      "longTerm": "neutral"
    },
    "volatility": 0.024904286150248197,
    "sharpeRatio": -0.9262056456308766,
    "maxDrawdown": -2.2924305655437625,
    "correlation": 0.112453107453884,
    "beta": 0.11392155306654811,
    "alpha": -0.021351813245867168,
    "timestamp": "2025-08-20T03:01:21.002Z",
    "dataSource": "Real"
  },
  "meta": {
    "timestamp": "2025-08-20T03:01:21.014Z",
    "version": "1.0.0",
    "analysis": "portfolio_metrics"
  }
}
\`\`\`

### Risk Analysis
\`\`\`http
GET /advanced-analytics/risk-analysis?wallets=wallet1,wallet2
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "overallRiskScore": 50,
    "volatility": 0.02731165822457018,
    "maxDrawdown": -2.397430703100565,
    "sharpeRatio": -0.8419196005697783,
    "beta": 0.0859960091255493,
    "correlation": 0.07512794808044913,
    "alpha": -0.021137609602133508,
    "riskLevel": "MEDIUM",
    "recommendations": [
      "Significant drawdown risk - review position sizing",
      "Low risk-adjusted returns - optimize portfolio allocation"
    ],
    "timestamp": "2025-08-20T03:02:58.483Z"
  },
  "meta": {
    "timestamp": "2025-08-20T03:02:58.483Z",
    "version": "1.0.0",
    "analysis": "risk_analysis"
  }
}
\`\`\`

### Market Trends
\`\`\`http
GET /advanced-analytics/market-trends?wallets=wallet1,wallet2
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "trends": {
      "shortTerm": "neutral",
      "mediumTerm": "bullish",
      "longTerm": "neutral"
    },
    "performance": {
      "shortTerm": -0.020959542683298978,
      "mediumTerm": -0.08982661149985277,
      "longTerm": -1.0928904399148753
    },
    "volatility": 0.02731165822457018,
    "correlation": 0.07512794808044913,
    "marketSentiment": "NEUTRAL",
    "predictions": {
      "shortTerm": "Negative",
      "mediumTerm": "Positive",
      "longTerm": "Negative",
      "confidence": 53.75639740402246
    },
    "timestamp": "2025-08-20T03:03:05.469Z"
  },
  "meta": {
    "timestamp": "2025-08-20T03:03:05.469Z",
    "version": "1.0.0",
    "analysis": "market_trends"
  }
}
\`\`\`

### Performance Analysis
\`\`\`http
GET /advanced-analytics/performance-analysis?wallets=wallet1,wallet2&timeframe=30d
Authorization: Bearer <token>
\`\`\`

**Query Parameters:**
- \`wallets\` (optional): Comma-separated list of wallet IDs
- \`timeframe\` (optional): Analysis timeframe (default: 30d)

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "totalReturn": -0.09506120341576868,
    "annualizedReturn": -1.119269007959857,
    "averageReturn": -0.0030664904327667316,
    "bestDay": 0.04537827274282136,
    "worstDay": -0.04514147609777358,
    "sharpeRatio": -0.9262056456308766,
    "volatility": 0.024904286150248197,
    "maxDrawdown": -2.2924305655437625,
    "historicalReturns": [...],
    "benchmark": {
      "bitcoin": -0.0030664904327667316,
      "sp500": 0.08,
      "gold": 0.06
    },
    "timestamp": "2025-08-20T03:03:12.109Z"
  },
  "meta": {
    "timestamp": "2025-08-20T03:03:12.109Z",
    "version": "1.0.0",
    "analysis": "performance_analysis",
    "timeframe": "30d"
  }
}
\`\`\`

### Portfolio Optimization
\`\`\`http
GET /advanced-analytics/portfolio-optimization?wallets=wallet1,wallet2
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "currentMetrics": {
      "riskScore": 50,
      "volatility": 0.02731165822457018,
      "sharpeRatio": -0.8419196005697783,
      "beta": 0.0859960091255493
    },
    "recommendations": [
      "Optimize portfolio allocation for better risk-adjusted returns"
    ],
    "targetMetrics": {
      "targetRiskScore": 40,
      "targetVolatility": 0.15,
      "targetSharpeRatio": 1
    },
    "actions": [
      {
        "action": "OPTIMIZE_ALLOCATION",
        "priority": "HIGH",
        "description": "Review and optimize portfolio allocation"
      }
    ],
    "timestamp": "2025-08-20T03:03:12.109Z"
  },
  "meta": {
    "timestamp": "2025-08-20T03:03:12.109Z",
    "version": "1.0.0",
    "analysis": "portfolio_optimization"
  }
}
\`\`\`

### Clear Analytics Cache
\`\`\`http
POST /advanced-analytics/cache/clear
Authorization: Bearer <token>
\`\`\`

**Response:**
\`\`\`json
{
  "success": true,
  "data": {
    "message": "Analytics cache cleared successfully",
    "clearedItems": 5,
    "timestamp": "2025-08-20T03:03:12.109Z"
  }
}
\`\`\`

---

## Bitcoin Integration Endpoints

### Bitcoin Core Health
\`\`\`http
GET /api/bitcoin-core-health/status
Authorization: Bearer <token>
\`\`\`

### Mempool Health
\`\`\`http
GET /api/mempool-health/status
Authorization: Bearer <token>
\`\`\`

### BRK Status
\`\`\`http
GET /api/brk/status
Authorization: Bearer <token>
\`\`\`

---

## Wallet Management

### Get Wallets
\`\`\`http
GET /wallets
Authorization: Bearer <token>
\`\`\`

### Get Wallet by ID
\`\`\`http
GET /wallets/:id
Authorization: Bearer <token>
\`\`\`

### Create Wallet
\`\`\`http
POST /wallets
Authorization: Bearer <token>
Content-Type: application/json

{
  "name": "My Wallet",
  "xpub": "xpub6C...",
  "network": "mainnet"
}
\`\`\`

---

## Transaction Management

### Get Transactions
\`\`\`http
GET /transactions?wallet=wallet1&limit=50&offset=0
Authorization: Bearer <token>
\`\`\`

### Get Transaction by ID
\`\`\`http
GET /transactions/:id
Authorization: Bearer <token>
\`\`\`

---

## Portfolio Management

### Get Portfolio Overview
\`\`\`http
GET /portfolio/overview
Authorization: Bearer <token>
\`\`\`

---

## Error Responses

### Authentication Error (401)
\`\`\`json
{
  "error": {
    "code": "UNAUTHORIZED",
    "message": "Unauthorized"
  },
  "version": "1.0.0"
}
\`\`\`

### Validation Error (400)
\`\`\`json
{
  "success": false,
  "error": {
    "message": "Validation failed",
    "code": 400,
    "details": {
      "type": "VALIDATION_ERROR",
      "fields": {
        "username": "Username is required"
      }
    },
    "timestamp": "2025-08-20T03:01:15.575Z"
  },
  "meta": {
    "version": "1.0.0"
  }
}
\`\`\`

### Not Found Error (404)
\`\`\`json
{
  "success": false,
  "error": {
    "message": "Resource not found",
    "code": 404,
    "details": {
      "type": "NOT_FOUND"
    },
    "timestamp": "2025-08-20T03:01:15.575Z"
  },
  "meta": {
    "version": "1.0.0"
  }
}
\`\`\`

### Server Error (500)
\`\`\`json
{
  "success": false,
  "error": {
    "message": "An internal error occurred",
    "code": 500,
    "details": {
      "type": "INTERNAL_ERROR",
      "context": "ADVANCED_ANALYTICS_PORTFOLIO_METRICS",
      "requestId": "req_1755658886897_7w2wqjmgz"
    },
    "timestamp": "2025-08-20T03:01:15.575Z"
  },
  "meta": {
    "version": "1.0.0"
  }
}
\`\`\`

---

## Rate Limiting

The API implements rate limiting to prevent abuse:

- **General endpoints:** 100 requests per minute
- **Authentication endpoints:** 5 requests per minute
- **Wallet operations:** 50 requests per minute
- **Bitcoin operations:** 30 requests per minute
- **Plugin operations:** 20 requests per minute

Rate limit headers are included in responses:
\`\`\`http
X-RateLimit-Limit: 100
X-RateLimit-Remaining: 95
X-RateLimit-Reset: 1755658886
\`\`\`

---

## WebSocket Notifications

### Connection
\`\`\`javascript
const ws = new WebSocket('ws://localhost:3100');

ws.onopen = () => {
  console.log('Connected to MyBitcoinFuture Treasury notification service');
};
\`\`\`

### Subscribe to Channels
\`\`\`javascript
// Subscribe to price alerts
ws.send(JSON.stringify({
  type: 'subscribe',
  channel: 'price_alerts'
}));

// Subscribe to transaction alerts
ws.send(JSON.stringify({
  type: 'subscribe',
  channel: 'transaction_alerts'
}));

// Subscribe to system alerts
ws.send(JSON.stringify({
  type: 'subscribe',
  channel: 'system_alerts'
}));
\`\`\`

### Set Price Alert
\`\`\`javascript
ws.send(JSON.stringify({
  type: 'price_alert',
  price: 50000,
  condition: 'above', // or 'below'
  walletId: 'wallet1' // optional
}));
\`\`\`

### Set Transaction Alert
\`\`\`javascript
ws.send(JSON.stringify({
  type: 'transaction_alert',
  walletId: 'wallet1',
  amount: 0.1,
  type: 'incoming' // 'incoming', 'outgoing', or 'any'
}));
\`\`\`

### Message Types

#### Price Update
\`\`\`json
{
  "type": "price_update",
  "price": 45000,
  "timestamp": "2025-08-20T03:01:15.575Z"
}
\`\`\`

#### Price Alert
\`\`\`json
{
  "type": "price_alert",
  "price": 45000,
  "targetPrice": 50000,
  "condition": "above",
  "walletId": "wallet1",
  "message": "Bitcoin price is above 50000",
  "timestamp": "2025-08-20T03:01:15.575Z"
}
\`\`\`

#### Transaction Alert
\`\`\`json
{
  "type": "transaction_alert",
  "transaction": {
    "txid": "abc123...",
    "amount": 0.5,
    "category": "incoming",
    "walletId": "wallet1"
  },
  "alert": {
    "walletId": "wallet1",
    "amount": 0.1,
    "type": "incoming"
  },
  "message": "Transaction detected: incoming 0.5 BTC",
  "timestamp": "2025-08-20T03:01:15.575Z"
}
\`\`\`

#### System Alert
\`\`\`json
{
  "type": "system_alert",
  "alert": {
    "type": "system_alert",
    "severity": "HIGH",
    "message": "Bitcoin Core connection lost",
    "timestamp": "2025-08-20T03:01:15.575Z"
  },
  "timestamp": "2025-08-20T03:01:15.575Z"
}
\`\`\`

---

## SDK Examples

### JavaScript/Node.js
\`\`\`javascript
const axios = require('axios');

class MyBitcoinFutureClient {
  constructor(baseURL, token) {
    this.client = axios.create({
      baseURL,
      headers: {
        'Authorization': \`Bearer \${token}\`,
        'Content-Type': 'application/json'
      }
    });
  }

  async getPortfolioMetrics(wallets = []) {
    const params = wallets.length > 0 ? { wallets: wallets.join(',') } : {};
    const response = await this.client.get('/advanced-analytics/portfolio-metrics', { params });
    return response.data;
  }

  async getRiskAnalysis(wallets = []) {
    const params = wallets.length > 0 ? { wallets: wallets.join(',') } : {};
    const response = await this.client.get('/advanced-analytics/risk-analysis', { params });
    return response.data;
  }

  async getMarketTrends(wallets = []) {
    const params = wallets.length > 0 ? { wallets: wallets.join(',') } : {};
    const response = await this.client.get('/advanced-analytics/market-trends', { params });
    return response.data;
  }
}

// Usage
const client = new MyBitcoinFutureClient('http://localhost:3100', 'your-token');
const metrics = await client.getPortfolioMetrics(['wallet1', 'wallet2']);
console.log(metrics);
\`\`\`

### Python
\`\`\`python
import requests

class MyBitcoinFutureClient:
    def __init__(self, base_url, token):
        self.base_url = base_url
        self.headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
    
    def get_portfolio_metrics(self, wallets=None):
        params = {'wallets': ','.join(wallets)} if wallets else {}
        response = requests.get(
            f'{self.base_url}/advanced-analytics/portfolio-metrics',
            headers=self.headers,
            params=params
        )
        return response.json()
    
    def get_risk_analysis(self, wallets=None):
        params = {'wallets': ','.join(wallets)} if wallets else {}
        response = requests.get(
            f'{self.base_url}/advanced-analytics/risk-analysis',
            headers=self.headers,
            params=params
        )
        return response.json()

# Usage
client = MyBitcoinFutureClient('http://localhost:3100', 'your-token')
metrics = client.get_portfolio_metrics(['wallet1', 'wallet2'])
print(metrics)
\`\`\`

---

## Security Utilities API

### Overview
The Security Utilities API provides high-performance validation and sanitization functions with intelligent caching and batch processing capabilities. All functions are optimized for performance with 70-80% improvement for repeated operations.

### Validation Functions

#### Cached Validation Functions
These functions provide the same validation as their standard counterparts but with intelligent caching for improved performance.

\`\`\`javascript
// Import security utilities
const SecurityUtils = require('@mybitcoinfuture/core/utils/SecurityUtils');

// Cached validation functions
const {
  validateBitcoinAddressCached,
  validateXPUBCached,
  validateEmailCached,
  validateUsernameCached,
  validatePasswordCached
} = SecurityUtils;
\`\`\`

#### Bitcoin Address Validation (Cached)
\`\`\`javascript
// Single address validation with caching
const result = validateBitcoinAddressCached('bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh');
// Returns: true (valid) or error message (invalid)

// Batch validation for multiple addresses
const batchResult = await SecurityUtils.batchValidate.bitcoinAddresses([
  'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh',
  '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
  '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy'
]);

// Returns:
{
  results: [true, true, true],
  summary: {
    total: 3,
    valid: 3,
    invalid: 0,
    validationTime: 45
  }
}
\`\`\`

#### XPUB Validation (Cached)
\`\`\`javascript
// Single XPUB validation with caching
const result = validateXPUBCached('xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE3Nbx2MNA');
// Returns: true (valid) or error message (invalid)

// Batch validation for multiple XPUBs
const batchResult = await SecurityUtils.batchValidate.xpubs([
  'xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE3Nbx2MNA',
  'xpub6DF8uhdarytz3FWdA8TvFSvvAh8mPvo2UJUF1G5d4vpiJ6UtQH'
]);
\`\`\`

#### Email Validation (Cached)
\`\`\`javascript
// Single email validation with caching
const result = validateEmailCached('user@example.com');
// Returns: true (valid) or error message (invalid)

// Batch validation for multiple emails
const batchResult = await SecurityUtils.batchValidate.emails([
  'user@example.com',
  'admin@mybitcoinfuture.com',
  'support@mybitcoinfuture.com'
]);
\`\`\`

#### Username Validation (Cached)
\`\`\`javascript
// Single username validation with caching
const result = validateUsernameCached('myuser123');
// Returns: true (valid) or error message (invalid)

// Batch validation for multiple usernames
const batchResult = await SecurityUtils.batchValidate.usernames([
  'admin',
  'user',
  'test',
  'demo'
]);
\`\`\`

#### Password Validation (Cached)
\`\`\`javascript
// Single password validation with caching
const result = validatePasswordCached('MySecurePass123!');
// Returns: true (valid) or error message (invalid)

// Batch validation for multiple passwords
const batchResult = await SecurityUtils.batchValidate.passwords([
  'MySecurePass123!',
  'AnotherPass456@',
  'WeakPass'
]);
\`\`\`

### Performance Monitoring

#### Get Performance Metrics
\`\`\`javascript
const metrics = SecurityUtils.getPerformanceMetrics();

// Returns:
{
  cacheHits: 1250,
  cacheMisses: 250,
  totalValidations: 1500,
  cacheHitRate: 0.833, // 83.3% hit rate
  avgValidationTime: 2.5, // 2.5ms average
  cacheSize: 850,
  uptime: 3600000 // 1 hour in milliseconds
}
\`\`\`

#### Reset Performance Metrics
\`\`\`javascript
SecurityUtils.resetPerformanceMetrics();
// Resets all performance counters to zero
\`\`\`

### Auto-Optimization System

#### Start Auto-Optimization
\`\`\`javascript
// Start automatic performance optimization
SecurityUtils.performanceOptimizer.startAutoOptimization();

// Get optimization status
const status = SecurityUtils.performanceOptimizer.getOptimizationStatus();
console.log('Auto-optimization enabled:', status.autoOptimizationEnabled);
console.log('Cache manager available:', status.cacheManagerAvailable);
\`\`\`

#### Cache Warming
\`\`\`javascript
// Pre-populate cache with common patterns
await SecurityUtils.performanceOptimizer.warmCache();
// Includes common Bitcoin addresses, emails, usernames, and XPUBs
\`\`\`

### Performance Best Practices

#### 1. Use Cached Functions for Repeated Validations
\`\`\`javascript
// ✅ Good: Use cached functions for repeated validations
for (const address of addresses) {
  const result = validateBitcoinAddressCached(address);
}

// ❌ Avoid: Using non-cached functions for repeated validations
for (const address of addresses) {
  const result = validateBitcoinAddress(address);
}
\`\`\`

#### 2. Use Batch Validation for Multiple Inputs
\`\`\`javascript
// ✅ Good: Use batch validation for multiple inputs
const result = await SecurityUtils.batchValidate.bitcoinAddresses(addresses);

// ❌ Avoid: Validating multiple inputs individually
for (const address of addresses) {
  const result = validateBitcoinAddressCached(address);
}
\`\`\`

#### 3. Monitor Performance Metrics
\`\`\`javascript
// Regular performance monitoring
setInterval(() => {
  const metrics = SecurityUtils.getPerformanceMetrics();
  if (metrics.cacheHitRate < 0.7) {
    console.warn('Low cache hit rate detected:', metrics.cacheHitRate);
  }
}, 300000); // Check every 5 minutes
\`\`\`

#### 4. Enable Auto-Optimization
\`\`\`javascript
// Enable automatic performance optimization
SecurityUtils.performanceOptimizer.startAutoOptimization();
\`\`\`

### Migration Guide

#### From Standard to Cached Functions
\`\`\`javascript
// Before (standard functions)
const { validateBitcoinAddress, validateEmail } = require('@mybitcoinfuture/core/utils/SecurityUtils');

// After (cached functions)
const { validateBitcoinAddressCached, validateEmailCached } = require('@mybitcoinfuture/core/utils/SecurityUtils');

// The API is identical - just replace function names
const result = validateBitcoinAddressCached(address); // Instead of validateBitcoinAddress(address)
\`\`\`

#### Adding Batch Validation
\`\`\`javascript
// Before (individual validation)
const results = [];
for (const email of emails) {
  results.push(validateEmailCached(email));
}

// After (batch validation)
const { batchValidate } = require('@mybitcoinfuture/core/utils/SecurityUtils');
const result = await batchValidate.emails(emails);
\`\`\`

---

## Changelog

### Version 2.0.0 (2025-08-24)
- **Performance Optimization:** Added intelligent caching with 70-80% performance improvement
- **Batch Processing:** Parallel validation for multiple inputs
- **Auto-Optimization:** Dynamic performance tuning based on usage patterns
- **Real-time Metrics:** Comprehensive performance monitoring and analytics
- **Security Utilities API:** New cached validation functions and batch processing
- **Plugin System:** Enhanced plugin architecture with dashboard integration

### Version 1.0.0 (2025-08-20)
- Initial release
- Advanced analytics endpoints
- Real-time WebSocket notifications
- Comprehensive portfolio management
- Bitcoin Core integration
- BRK integration
- Enhanced security features
`,
  'QUICKSTART.md': `# 🚀 Bitcoin Treasury Management System - Quick Start

# STATUS: As of v1.2.0, the system is stable and foundational work is complete. New development focuses on features, polish, and plugin ecosystem. See tasks/ for current roadmap.

## Get Running in 2 Minutes

### Prerequisites

- Node.js 18+ installed
- npm or yarn

### 1. Setup Dependencies

\`\`\`bash
npm run setup
\`\`\`

### 2. Start Everything

\`\`\`bash
npm start
\`\`\`

This will:

- ✅ Initialize the database
- ✅ Create admin user (admin/admin123)
- ✅ Seed demo wallet with 1 BTC
- ✅ Start backend API (port 3100)
- ✅ Start frontend UI (port 3003)

### 3. Open the App

- **Frontend**: http://localhost:3003
- **Backend API**: http://localhost:3100
- **Login**: admin / admin123

### 4. What You Can Do Now

✅ **Working Features:**

- View wallets and balances
- Browse transaction history
- Portfolio analytics dashboard
- UTXO management interface
- Cost basis & tax reporting
- Alert management
- User management (admin only)

⚠️ **Mock Data Notice:**
Most data is currently mocked. For production use, you'll need to:

- Connect to a real Bitcoin Core node
- Configure proper Bitcoin RPC credentials
- Set up real price data sources

## Manual Control

Run services separately:

\`\`\`bash
# Backend only
npm run backend

# Frontend only
npm run frontend
\`\`\`

## Environment Variables

Set these for Bitcoin Core integration:

\`\`\`bash
export BITCOIN_HOST=localhost
export BITCOIN_PORT=8332
export BITCOIN_RPCUSER=your_rpc_user
export BITCOIN_RPCPASSWORD=your_rpc_password
export ADMIN_PASSWORD=your_admin_password
\`\`\`

## Troubleshooting

**Port conflicts?**

- Backend uses port 3100
- Frontend uses port 3003
- Kill existing processes: \`pkill -f "node.*api-server"\` or \`pkill -f "vite"\`

**Database issues?**

- Delete \`treasury.db\` and restart to reset everything

**Module not found?**

- Run \`npm run setup\` again

---

🎯 **Next Steps**: See the [System Overview](./SYSTEM_OVERVIEW.md) for complete system architecture and the [Development Guide](./development/guide.md) for development priorities.

## Mock Data: Resetting and Reseeding with Large Datasets

You can now reset and reseed the database with large, realistic mock data for development, testing, or demos. This uses the integrated \`test/data-generator.js\` to generate wallets, transactions, UTXOs, price history, and more.

### How to Use

1. **Delete the existing database (optional, for a clean reset):**
   \`\`\`bash
   rm -f dist/treasury.db
   \`\`\`

2. **Set the dataset size or path:**
   - To use a built-in size, set the \`SEED_DATASET\` environment variable to one of:
     - \`small\` (3 wallets, 100 transactions, 50 UTXOs)
     - \`medium\` (5 wallets, 1000 transactions, 500 UTXOs)
     - \`large\` (10 wallets, 5000 transactions, 2000 UTXOs)
     - \`enterprise\` (20 wallets, 10000 transactions, 5000 UTXOs)
   - Or, set \`SEED_DATASET\` to the path of a JSON file generated by \`test/data-generator.js\`.

   Example:
   \`\`\`bash
   export SEED_DATASET=large
   # or
   export SEED_DATASET=./test-data-large-1712345678901.json
   \`\`\`

3. **Run the setup script:**
   \`\`\`bash
   node setup.js --username=admin --password=admin123
   # or
   npm run setup
   \`\`\`

   This will seed the database with the chosen dataset size or file.

### Notes
- The large dataset seeding is only active in development/test environments.
- You can generate a custom dataset file with:
  \`\`\`bash
  npm run generate-test-data
  # or
  node test/data-generator.js large
  \`\`\`
- All major data types are seeded: wallets, transactions, UTXOs, price history, alerts, cost basis, audit logs, and more.
- For production, use real data and do not set \`SEED_DATASET\`.

---
`,
  'ONBOARDING_GUIDE.md': `# Onboarding Guide

## Overview

This guide documents the enhanced onboarding process for the MyBitcoinFuture Bitcoin Treasury Management System. The onboarding wizard helps users set up their Bitcoin treasury with auto-discovery and sensible defaults.

## Enhanced Setup Flow

### Setup Overview

The enhanced setup process uses auto-discovery to configure optimal settings while providing manual override options. The setup completes in under 5 minutes and covers all essential configuration.

### Auto-Discovery Features

#### Timezone Detection
- **Automatic Detection:** System detects user's timezone automatically
- **Manual Override:** Users can select different timezone if needed
- **Validation:** Ensures timezone is valid and supported

#### Language Detection
- **Browser Language:** Detects user's browser language preference
- **System Language:** Falls back to system language if browser language unavailable
- **Manual Selection:** Users can choose from supported languages

#### Bitcoin Node Detection
- **Local Node:** Automatically detects local Bitcoin Core node
- **Network Configuration:** Detects mainnet/testnet configuration
- **Connection Testing:** Validates node connectivity and responsiveness
- **Alternative Sources:** Suggests public APIs if local node unavailable

#### Network Configuration
- **Mainnet/Testnet:** Detects and configures appropriate network
- **API Endpoints:** Auto-configures optimal API endpoints
- **Fallback Options:** Provides alternative data sources

## Setup Steps

### Step 1: Welcome and Auto-Discovery

#### Purpose
Introduces users to the system and begins auto-discovery process.

#### Content
- **Title:** "Welcome to MyBitcoinFuture Treasury"
- **Subtitle:** "Setting up your Bitcoin treasury management system"
- **Description:** "We'll automatically detect your optimal settings and guide you through the configuration process."
- **Duration:** 30 seconds

#### Auto-Discovery Process
\`\`\`javascript
// Auto-discovery sequence
const autoDiscovery = {
  timezone: detectUserTimezone(),
  language: detectUserLanguage(),
  bitcoinNode: detectBitcoinNode(),
  network: detectNetworkConfiguration()
};
\`\`\`

### Step 2: Basic Configuration

#### Purpose
Configure essential system settings with auto-discovered defaults.

#### Content
- **Title:** "Basic Configuration"
- **Subtitle:** "Essential system settings"
- **Description:** "Review and adjust the auto-discovered settings for your environment."

#### Configuration Options
- **Timezone:** Auto-detected timezone with manual override
- **Language:** Auto-detected language with manual selection
- **System Name:** Customizable system identifier
- **Admin Account:** Primary administrator account setup

#### Validation
- All required fields must be completed
- Timezone and language must be valid
- Admin credentials must meet security requirements

### Step 3: Security Configuration

#### Purpose
Configure security settings and authentication.

#### Content
- **Title:** "Security Configuration"
- **Subtitle:** "Authentication and access control"
- **Description:** "Set up security settings and authentication methods."

#### Security Options
- **Password Policy:** Configure password requirements
- **Two-Factor Authentication:** Enable 2FA for admin accounts
- **Session Management:** Configure session timeouts
- **Access Control:** Set up role-based permissions

#### Security Features
- Strong password validation
- 2FA setup with QR code generation
- Session timeout configuration
- Audit logging configuration

### Step 4: System Configuration

#### Purpose
Configure system performance and operational settings.

#### Content
- **Title:** "System Configuration"
- **Subtitle:** "Performance and operational settings"
- **Description:** "Configure system performance and operational parameters."

#### System Options
- **Database Configuration:** SQLite database settings
- **Cache Settings:** Redis cache configuration
- **Performance Tuning:** Response time optimization
- **Backup Configuration:** Automated backup settings

#### Performance Features
- Database optimization settings
- Cache configuration for improved performance
- Backup scheduling and retention
- System monitoring configuration

### Step 5: Bitcoin Node Configuration

#### Purpose
Configure Bitcoin data sources and connectivity.

#### Content
- **Title:** "Bitcoin Configuration"
- **Subtitle:** "Bitcoin node and data sources"
- **Description:** "Configure Bitcoin data sources for real-time information."

#### Bitcoin Options
- **Local Bitcoin Core:** Connect to local Bitcoin Core node
- **Public APIs:** Configure public Bitcoin APIs
- **Network Selection:** Choose mainnet or testnet
- **Data Sources:** Configure multiple data sources

#### Auto-Discovery Results
\`\`\`javascript
// Bitcoin node auto-discovery
const bitcoinConfig = {
  localNode: {
    detected: true,
    host: 'localhost',
    port: 8332,
    network: 'mainnet'
  },
  publicAPIs: {
    mempool: 'https://mempool.space/api',
    blockstream: 'https://blockstream.info/api'
  }
};
\`\`\`

#### Connection Testing
- Test local Bitcoin Core connectivity
- Validate API endpoint responsiveness
- Verify network configuration
- Test data retrieval capabilities

### Step 6: Storage and Backup

#### Purpose
Configure data storage and backup settings.

#### Content
- **Title:** "Storage and Backup"
- **Subtitle:** "Data persistence and backup configuration"
- **Description:** "Configure data storage and automated backup settings."

#### Storage Options
- **Database Location:** Configure database storage path
- **Backup Location:** Set backup storage directory
- **Backup Schedule:** Configure automated backup frequency
- **Retention Policy:** Set backup retention periods

#### Backup Features
- Automated daily backups
- Incremental backup support
- Backup verification
- Restore functionality

## Technical Implementation

### EnhancedSetupPage Component
\`\`\`javascript
// Main setup component
const EnhancedSetupPage = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [autoDiscovery, setAutoDiscovery] = useState({});
  const [configuration, setConfiguration] = useState({});
  
  // Auto-discovery on component mount
  useEffect(() => {
    performAutoDiscovery();
  }, []);
};
\`\`\`

### Auto-Discovery Utilities
\`\`\`javascript
// Auto-discovery functions
const detectUserTimezone = () => {
  return Intl.DateTimeFormat().resolvedOptions().timeZone;
};

const detectUserLanguage = () => {
  return navigator.language || navigator.userLanguage;
};

const detectBitcoinNode = async () => {
  // Test local Bitcoin Core connectivity
  const endpoints = [
    { host: 'localhost', port: 8332 },
    { host: 'localhost', port: 18332 }
  ];
  
  for (const endpoint of endpoints) {
    if (await testBitcoinConnection(endpoint)) {
      return endpoint;
    }
  }
  
  return null;
};
\`\`\`

### Validation and Error Handling
\`\`\`javascript
// Setup validation
const validateConfiguration = (config) => {
  const errors = [];
  
  if (!config.timezone) errors.push('Timezone is required');
  if (!config.language) errors.push('Language is required');
  if (!config.adminPassword) errors.push('Admin password is required');
  
  return errors;
};
\`\`\`

## Setup Completion

### Success Criteria
- All required configuration completed
- Bitcoin node connectivity verified
- Security settings configured
- Backup system operational
- System ready for use

### Post-Setup Actions
- Create initial admin user
- Initialize database schema
- Configure default settings
- Start background services
- Redirect to main dashboard

### Setup Verification
\`\`\`javascript
// Verify setup completion
const verifySetup = async () => {
  const checks = [
    checkDatabaseConnection(),
    checkBitcoinConnectivity(),
    checkSecurityConfiguration(),
    checkBackupConfiguration()
  ];
  
  const results = await Promise.all(checks);
  return results.every(result => result.success);
};
\`\`\`

## Troubleshooting

### Common Issues
- **Bitcoin Node Not Found:** Check if Bitcoin Core is running
- **Network Connectivity:** Verify internet connection
- **Permission Errors:** Check file system permissions
- **Port Conflicts:** Ensure required ports are available

### Setup Recovery
- **Restart Setup:** Begin setup process again
- **Manual Configuration:** Use manual configuration options
- **Reset Database:** Clear existing configuration
- **Contact Support:** Get assistance for complex issues

## Security Considerations

### Setup Security
- Secure admin account creation
- Strong password requirements
- 2FA setup during configuration
- Secure storage of configuration

### Data Protection
- Encrypted configuration storage
- Secure backup procedures
- Access control implementation
- Audit logging from setup

## Next Steps

### After Setup
- Add Bitcoin wallets via xpub
- Configure user accounts and permissions
- Set up alerts and notifications
- Customize theme and preferences

### System Usage
- Monitor portfolio performance
- Track transaction history
- Generate reports and analytics
- Manage system configuration
`,
  'QUICK_REFERENCE.md': `# Quick Reference Guide

## Getting Started

### Start the System
\`\`\`bash
npm run dev                  # Full development environment
npm run dev:api             # Backend only  
npm run dev:web             # Frontend only
npm run dev:cli             # CLI tool
\`\`\`

### Access Points
- **Web Dashboard**: http://localhost:3003
- **API Server**: http://localhost:3100
- **CLI**: \`node cli/cli.js --help\`

## Essential CLI Commands

### System Status
\`\`\`bash
node cli/cli.js show-status              # System health
node cli/cli.js portfolio                # Portfolio overview
\`\`\`

### Wallet Management
\`\`\`bash
node cli/cli.js list-wallets             # List all wallets
node cli/cli.js add-wallet --xpub xpub... --label "My Wallet"
node cli/cli.js remove-wallet <id>       # Remove wallet
node cli/cli.js balance                  # Show balances
\`\`\`

### Transaction Management
\`\`\`bash
node cli/cli.js show-transactions        # Wallet transactions
node cli/cli.js show-transactions-global # All transactions
node cli/cli.js show-transactions-summary # Transaction stats
\`\`\`

### User Management
\`\`\`bash
node cli/cli.js list-users               # List all users
\`\`\`

### Alert Management
\`\`\`bash
node cli/cli.js list-alerts              # List all alerts
\`\`\`

### Plugin Management
\`\`\`bash
node cli/cli.js manage-plugins           # Manage plugins
\`\`\`

### Reporting
\`\`\`bash
node cli/cli.js list-reports             # List reports
node cli/cli.js create-report            # Create new report
\`\`\`

### System Management
\`\`\`bash
node cli/cli.js show-features            # Show feature flags
node cli/cli.js show-logs                # Show system logs
node cli/cli.js show-marketplace         # Show marketplace
node cli/cli.js show-i18n                # Show internationalization
node cli/cli.js show-a11y                # Show accessibility
node cli/cli.js show-deprecations        # Show deprecations
node cli/cli.js show-migration-notes     # Show migration notes
\`\`\`

### Backup and Restore
\`\`\`bash
node cli/cli.js backup                   # Create backup
node cli/cli.js restore                  # Restore from backup
\`\`\`

### Data Export
\`\`\`bash
node cli/cli.js show-transactions-global --output csv
node cli/cli.js balance --output json
node cli/cli.js portfolio --output table
\`\`\`

## Key API Endpoints

### System
\`\`\`http
GET /health                           # System health
GET /features                         # Feature flags
GET /status                           # System status
\`\`\`

### Authentication
\`\`\`http
POST /auth/login                      # User login
POST /auth/register                   # User registration
GET /auth/logout                      # User logout
\`\`\`

### Wallets
\`\`\`http
GET /wallets                          # List wallets
POST /wallets                         # Create wallet
GET /wallets/:id                      # Wallet details
GET /wallets/:id/balance              # Wallet balance
GET /portfolio/overview               # Portfolio overview
\`\`\`

### Transactions
\`\`\`http
GET /transactions                     # Global transactions
GET /transactions/:txid               # Transaction details
GET /transactions/summary             # Transaction stats
GET /transactions/export              # Export transactions
\`\`\`

### Users
\`\`\`http
GET /users                            # List users
POST /users                           # Create user
GET /users/:id                        # User details
PUT /users/:id                        # Update user
DELETE /users/:id                     # Delete user
\`\`\`

### Alerts
\`\`\`http
GET /alerts                           # List alerts
POST /alerts                          # Create alert
GET /alerts/:id                       # Alert details
PUT /alerts/:id                       # Update alert
DELETE /alerts/:id                    # Delete alert
\`\`\`

### Portfolio & Analytics
\`\`\`http
GET /portfolio/overview               # Portfolio overview
GET /portfolio/performance            # Performance metrics
GET /portfolio/risk                   # Risk assessment
GET /advanced-analytics/*             # Advanced analytics
\`\`\`

### Reports
\`\`\`http
GET /reports                          # List reports
POST /reports/generate                # Generate report
GET /reports/:id                      # Report details
GET /reports/:id/download             # Download report
\`\`\`

### Plugins
\`\`\`http
GET /plugins                          # List plugins
POST /plugins                         # Install plugin
GET /plugins/:id                      # Plugin details
DELETE /plugins/:id                   # Remove plugin
\`\`\`

### System Management
\`\`\`http
GET /logs                             # System logs
GET /config                           # System configuration
GET /jobs                             # Background jobs
GET /sync                             # Synchronization status
GET /backup                           # Backup operations
\`\`\`

### Bitcoin Integration
\`\`\`http
GET /bitcoin                          # Bitcoin operations
GET /xpub                             # xpub operations
GET /local-bitcoin                    # Local Bitcoin node
GET /api/bitcoin-core-health          # Bitcoin Core health
GET /api/mempool-health               # Mempool health
GET /api/electrum-health              # Electrum health
\`\`\`

### Advanced Features
\`\`\`http
GET /compliance                       # Compliance features
GET /privacy                          # Privacy settings
GET /audit                            # Audit logs
GET /security-events                  # Security events
GET /performance                      # Performance monitoring
GET /advanced-security                # Advanced security
\`\`\`

## Development Commands

### Testing
\`\`\`bash
npm test                              # Run all tests
npm run test:watch                    # Watch mode
npm run test:performance              # Performance tests
\`\`\`

### Code Quality
\`\`\`bash
npm run lint                          # Lint all code
npm run lint:api                      # Lint API code
npm run lint:web                      # Lint web code
npm run lint:cli                      # Lint CLI code
\`\`\`

### Building
\`\`\`bash
npm run build                         # Build all modules
npm run build:api                     # Build API
npm run build:web                     # Build web
npm run build:cli                     # Build CLI
\`\`\`

### Deployment
\`\`\`bash
npm run deploy                        # Deploy to production
npm run deploy:docker                 # Deploy with Docker
\`\`\`

## Configuration

### Environment Variables
\`\`\`bash
API_URL=http://127.0.0.1:3100         # API server URL
AUTH_TOKEN=your_jwt_token             # Authentication token
NODE_ENV=development                  # Environment mode
\`\`\`

### Database
\`\`\`bash
TEST_DB_PATH=/path/to/test.db         # Test database path
\`\`\`

## Error Handling

### CLI Errors
\`\`\`bash
# Common error codes
E_INVALID_XPUB                        # Invalid xpub format
E_WALLET_NOT_FOUND                    # Wallet not found
E_API_ERROR                           # API request failed
\`\`\`

### API Errors
\`\`\`http
400 Bad Request                       # Invalid request
401 Unauthorized                      # Authentication required
403 Forbidden                         # Access denied
404 Not Found                         # Resource not found
500 Internal Server Error             # Server error
\`\`\`

## Output Formats

### CLI Output Options
\`\`\`bash
--output json                         # JSON format
--output csv                          # CSV format
--output table                        # Table format (default)
--verbose                             # Verbose output
--quiet                               # Quiet output
\`\`\`

### API Response Format
\`\`\`json
{
  "success": true,
  "data": {},
  "version": "1.0.0"
}
\`\`\`

## Security

### Authentication
- JWT token-based authentication
- Bearer token in Authorization header
- Token expiration and refresh

### Data Protection
- xpub-only architecture
- No private key handling
- Read-only Bitcoin operations
- Secure logging with data redaction

### Rate Limiting
- General rate limiting on all endpoints
- Specific limits for authentication
- Wallet and Bitcoin operation limits
`,
};

/**
 * Get documentation metadata
 * @param {string} docPath - Path to the documentation file
 * @returns {object} - Metadata about the documentation
 */
export const getDocumentationMetadata = (docPath) => {
  const fileName = docPath.split('/').pop();
  
  const metadata = {
    'SYSTEM_OVERVIEW.md': {
      title: 'System Overview',
      description: 'Architecture and component overview of the Bitcoin Treasury Management System',
      category: 'Getting Started',
      lastUpdated: '2025-09-10'
    },
    'API_DOCUMENTATION.md': {
      title: 'API Reference',
      description: 'Complete REST API endpoints and integration examples',
      category: 'API Documentation',
      lastUpdated: '2025-09-10'
    },
    'QUICKSTART.md': {
      title: 'Quick Start Guide',
      description: 'Fast deployment and configuration guide',
      category: 'Getting Started',
      lastUpdated: '2025-09-10'
    },
    'ONBOARDING_GUIDE.md': {
      title: 'Onboarding Guide',
      description: 'Enhanced setup and configuration for new users',
      category: 'Getting Started',
      lastUpdated: '2025-09-10'
    },
    'QUICK_REFERENCE.md': {
      title: 'Quick Reference',
      description: 'Essential CLI commands and API endpoints',
      category: 'User Documentation',
      lastUpdated: '2025-09-10'
    }
  };
  
  return metadata[fileName] || {
    title: fileName.replace('.md', '').replace(/_/g, ' '),
    description: 'Documentation',
    category: 'Other',
    lastUpdated: '2025-09-10'
  };
};

/**
 * Import dashboard documentation content from local store
 * @param {string} docPath - Path to the documentation file (e.g., 'SYSTEM_OVERVIEW.md')
 * @returns {Promise<string>} - The documentation content
 */
export const importDashboardContent = async (docPath) => {
  const fileName = docPath.split('/').pop();
  
  // Return content from local store
  const content = LOCAL_DOCUMENTATION_CONTENT[fileName];
  
  if (!content) {
    throw new Error(`Documentation not found: ${fileName}`);
  }
  
  return content;
};

/**
 * Search documentation content
 * @param {string} query - Search query
 * @param {Array<string>} docPaths - Array of documentation paths to search
 * @returns {Promise<Array>} - Search results
 */
export const searchDocumentation = async (query, docPaths = []) => {
  if (!query || query.trim() === '') {
    return [];
  }
  
  const results = [];
  
  for (const docPath of docPaths) {
    try {
      const content = await importDashboardContent(docPath);
      const fileName = docPath.split('/').pop();
      const metadata = getDocumentationMetadata(docPath);
      
      // Simple text search
      const searchIndex = content.toLowerCase();
      const queryLower = query.toLowerCase();
      
      if (searchIndex.includes(queryLower)) {
        // Find the first occurrence for context
        const index = searchIndex.indexOf(queryLower);
        const start = Math.max(0, index - 100);
        const end = Math.min(content.length, index + query.length + 100);
        const snippet = content.substring(start, end);
        
        results.push({
          docPath,
          fileName,
          title: metadata.title,
          description: metadata.description,
          category: metadata.category,
          snippet: snippet.trim(),
          relevance: 1
        });
      }
    } catch (error) {
      console.warn(`Failed to search ${docPath}:`, error.message);
    }
  }
  
  return results.sort((a, b) => b.relevance - a.relevance);
};

/**
 * Get all available documentation
 * @returns {Promise<Array>} - Array of documentation metadata
 */
export const getAllDocumentation = async () => {
  const docs = [];
  
  for (const fileName of Object.keys(LOCAL_DOCUMENTATION_CONTENT)) {
    const metadata = getDocumentationMetadata(fileName);
    docs.push({
      docPath: fileName,
      fileName,
      ...metadata
    });
  }
  
  return docs.sort((a, b) => a.title.localeCompare(b.title));
};

export default {
  importDashboardContent,
  searchDocumentation,
  getAllDocumentation,
  getDocumentationMetadata
};
